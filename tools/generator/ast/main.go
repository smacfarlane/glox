package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"text/template"
)

const loxExpressionTemplate = `
type {{ .Name }} struct {
  {{- range .Fields }}
  {{ .Name }} {{ .Type }}
  {{- end }}
}

func (n {{ .Name }}) Accept(v Visitor) string {
  return v.Visit{{.Name}}Expression(n)
}
`

const loxExpressionHeader = `
// DO NOT EDIT
// This file is generated by tools/generator/ast/main.go
package ast

import (
  "github.com/smacfarlane/glox/internal/tokens"
)

type Expr interface {
  Accept(Visitor) string
}
`

type astDefinition struct {
	Name   string     `json:"name"`
	Fields []astField `json:"fields"`
}

type astField struct {
	Type string `json:"type"`
	Name string `json:"name"`
}

func main() {
	file, err := ioutil.ReadFile("tools/generator/ast/data/ast.json")
	if err != nil {
		panic("Unable to load ast from data/ast.json")
	}

	var loxExpressions []astDefinition

	err = json.Unmarshal(file, &loxExpressions)
	if err != nil {
		panic(err)
	}

	defineExpressions(loxExpressions)

}

func defineExpressions(types []astDefinition) {

	fmt.Printf("%s\n", loxExpressionHeader)

	tmpl, err := template.New("typeDefinition").Parse(loxExpressionTemplate)
	if err != nil {
		panic(err)
	}

	for _, t := range types {
		err = tmpl.Execute(os.Stdout, t)
	}
}
